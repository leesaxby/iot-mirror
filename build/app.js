(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _todoList = require("./directives/todoList.js");

var _todoList2 = _interopRequireDefault(_todoList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = angular.module("mirror-app", ["todo-list"]);

},{"./directives/todoList.js":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var todoList = angular.module("todo-list", []);

todoList.directive("todoList", ['WebSocket', function (webSocket) {
  return {
    retrict: "E",
    templateUrl: "./views/todo-list.html",
    controller: function () {

      var self = this;
      this.items = [];
      this.newItem = "";

      this.addItem = function () {
        var obj = {
          type: "add",
          data: {
            text: this.newItem,
            done: false
          }
        };

        webSocket.sendMessage(JSON.stringify(obj));
        this.newItem = "";
      };

      this.toggleDone = function (item) {
        item.done = !item.done;

        var obj = {
          type: "update",
          data: item
        };

        webSocket.sendMessage(JSON.stringify(obj));
      };

      webSocket.initialItemsPromise.then(function (data) {
        for (var i = 0; i < data.data.length; i++) {
          self.items.push(data.data[i]);
        }
      }, function (err) {
        console.log(err);
      });

      webSocket.addItemPromise.then(function (data) {
        self.items.push(data.data);
      }, function (err) {
        console.log(err);
      });

      webSocket.updateItemPromise.then(function (data) {
        for (var i = 0; i < self.items.length; i++) {
          if (self.items[i].id === data.data.id) {
            self.items[i].done = data.data.done;
            break;
          }
        }
      }, function (err) {
        console.log(err);
      });
    },
    controllerAs: "todo"
  };
}]);

exports.default = todoList;

},{}],3:[function(require,module,exports){
"use strict";

var app = angular.module("mirror-app");

app.factory("WebSocket", ['$q', function ($q) {

  var ws = new WebSocket("ws://178.62.117.150:9999", "echo-protocol");
  var initialItemsDeferred = $q.defer();
  var addItemDeferred = $q.defer();
  var updateItemDeferred = $q.defer();

  ws.addEventListener("message", function (e) {
    var data = JSON.parse(e.data);

    switch (data.type) {
      case "add":
        addItemDeferred.resolve(data);
        break;
      case "update":
        updateItemDeferred.resolve(data);
        break;
      case "connect":
        initialItemsDeferred.resolve(data);
        break;
    };
  });

  function sendMessage(data) {
    ws.send(data);
  }

  return {
    initialItemsPromise: initialItemsDeferred.promise,
    addItemPromise: addItemDeferred.promise,
    updateItemPromise: updateItemDeferred.promise,
    sendMessage: sendMessage
  };
}]);

},{}]},{},[1,2,3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
