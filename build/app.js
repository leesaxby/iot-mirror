(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _todoList = require("./directives/todoList.js");

var _todoList2 = _interopRequireDefault(_todoList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = angular.module("mirror-app", ["todo-list"]);

},{"./directives/todoList.js":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var todoList = angular.module("todo-list", []);

todoList.directive("todoList", ['WebSocket', function (webSocket) {
  return {
    retrict: "E",
    templateUrl: "./views/todo-list.html",
    controller: function ($scope) {

      webSocket.addCallback("add", function (data) {
        $scope.$apply(function () {
          $scope.todo.items.push(data.data);
        });
      });

      webSocket.addCallback("update", function (data) {
        $scope.$apply(function () {
          for (var i = 0; i < $scope.todo.items.length; i++) {
            if ($scope.todo.items[i].id === data.data.id) {
              $scope.todo.items[i].done = data.data.done;
              break;
            }
          }
        });
      });

      this.items = webSocket.initialItems;
      this.newItem = "";
      this.addItem = function () {
        var obj = {
          type: "todo_item",
          data: {
            text: this.newItem,
            done: false
          }
        };

        webSocket.sendMessage(JSON.stringify(obj));
        this.newItem = "";
      };
      this.toggleDone = function (item) {
        item.done = !item.done;

        var obj = {
          type: "update",
          data: item
        };

        webSocket.sendMessage(JSON.stringify(obj));
      };
    },
    controllerAs: "todo"
  };
}]);

exports.default = todoList;

},{}],3:[function(require,module,exports){
"use strict";

var app = angular.module("mirror-app");

app.factory("WebSocket", function () {

  var ws = new WebSocket("ws://178.62.117.150:9999", "echo-protocol");
  var initialItems = [];
  var events = {
    add: [],
    update: []
  };

  function addCallback(type, callback) {
    if (type === "add") {
      events.add.push(callback);
    }

    if (type === "update") {
      events.update.push(callback);
    }
  }

  ws.addEventListener("message", function (e) {
    var data = JSON.parse(e.data);
    if (data.type === "add") {
      for (var i = 0; i < events.add.length; i++) {
        events.add[i](data);
      }
    }

    if (data.type === "update") {
      for (var i = 0; i < events.update.length; i++) {
        events.update[i](data);
      }
    }

    if (data.type === "connect") {
      for (var i = 0; i < data.data.length; i++) {
        initialItems.push(data.data[i]);
      }
    }
  });

  function sendMessage(data) {
    ws.send(data);
  }

  return {
    initialItems: initialItems,
    sendMessage: sendMessage,
    addCallback: addCallback
  };
});

},{}]},{},[1,2,3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
