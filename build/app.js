(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _todoList = require("./directives/todoList.js");

var _todoList2 = _interopRequireDefault(_todoList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = angular.module("mirror-app", ["todo-list"]);

},{"./directives/todoList.js":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var todoList = angular.module("todo-list", []);

todoList.directive("todoList", ['WebSocket', function (webSocket) {
	return {
		retrict: "E",
		templateUrl: "./views/todo-list.html",
		controller: function ($scope) {

			webSocket.addCallback("add", function (data) {
				$scope.$apply(function () {
					$scope.todo.items.push(data.data);
				});
			});

			this.items = webSocket.initialItems;
			this.newItem = "";
			this.addItem = function () {
				var obj = {
					type: "todo_item",
					data: {
						text: this.newItem,
						done: false
					}
				};

				webSocket.sendMessage(JSON.stringify(obj));
				this.newItem = "";
			};
			this.toggleDone = function (item) {
				item.done = !item.done;

				var obj = {
					type: "todo_item",
					data: item
				};

				webSocket.sendMessage(JSON.stringify(obj));
			};
		},
		controllerAs: "todo"
	};
}]);

exports.default = todoList;

},{}],3:[function(require,module,exports){
"use strict";

var app = angular.module("mirror-app");

app.factory("WebSocket", function () {

  var ws = new WebSocket("ws://178.62.117.150:9999", "echo-protocol");
  var initialItems = [];
  var events = {
    add: []
  };

  function addCallback(type, callback) {
    if (type === "add") {
      events.add.push(callback);
    }
  }

  ws.addEventListener("message", function (e) {
    var data = JSON.parse(e.data);
    if (data.type == "add") {
      for (var i = 0; i < events.add.length; i++) {
        events.add[i](data);
      }
    }

    if (data.type == "connect") {
      for (var i = 0; i < data.data.length; i++) {
        initialItems.push(data.data[i]);
      }
    }
  });

  function sendMessage(data) {
    ws.send(data);
  }

  return {
    initialItems: initialItems,
    sendMessage: sendMessage,
    addCallback: addCallback
  };
});

},{}]},{},[1,2,3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXBwLmpzIiwic3JjL2RpcmVjdGl2ZXMvdG9kb0xpc3QuanMiLCJzcmMvc2VydmljZXMvd2Vic29ja2V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUNFQSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFFLFlBQVksRUFBRSxDQUFFLFdBQVcsQ0FBRSxDQUFFLENBQUM7Ozs7Ozs7OztBQ0F6RCxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFFLFdBQVcsRUFBRSxFQUFFLENBQUUsQ0FBQzs7QUFFakQsUUFBUSxDQUFDLFNBQVMsQ0FBRSxVQUFVLEVBQUUsQ0FBRSxXQUFXLEVBQUUsVUFBVyxTQUFTLEVBQUc7QUFDckUsUUFBTztBQUNOLFNBQU8sRUFBRSxHQUFHO0FBQ1osYUFBVyxFQUFFLHdCQUF3QjtBQUNyQyxZQUFVLEVBQUUsVUFBVSxNQUFNLEVBQUc7O0FBRTlCLFlBQVMsQ0FBQyxXQUFXLENBQUUsS0FBSyxFQUFFLFVBQVUsSUFBSSxFQUFHO0FBQzlDLFVBQU0sQ0FBQyxNQUFNLENBQUMsWUFBVztBQUN4QixXQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDO0tBQ3BDLENBQUMsQ0FBQztJQUNILENBQUMsQ0FBQzs7QUFFSCxPQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7QUFDcEMsT0FBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDbEIsT0FBSSxDQUFDLE9BQU8sR0FBRyxZQUFXO0FBQ3pCLFFBQUksR0FBRyxHQUFHO0FBQ1AsU0FBSSxFQUFFLFdBQVc7QUFDakIsU0FBSSxFQUFFO0FBQ0wsVUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQ2xCLFVBQUksRUFBRSxLQUFLO01BQ1g7S0FDRCxDQUFDOztBQUVKLGFBQVMsQ0FBQyxXQUFXLENBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBRSxHQUFHLENBQUUsQ0FBRSxDQUFBO0FBQzlDLFFBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLENBQUM7QUFDRixPQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFHO0FBQ2xDLFFBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOztBQUV2QixRQUFJLEdBQUcsR0FBRztBQUNQLFNBQUksRUFBRSxXQUFXO0FBQ2pCLFNBQUksRUFBRSxJQUFJO0tBQ1YsQ0FBQzs7QUFFSixhQUFTLENBQUMsV0FBVyxDQUFFLElBQUksQ0FBQyxTQUFTLENBQUUsR0FBRyxDQUFFLENBQUUsQ0FBQTtJQUM5QyxDQUFDO0dBQ0Y7QUFDRCxjQUFZLEVBQUUsTUFBTTtFQUNwQixDQUFDO0NBQ0YsQ0FBQyxDQUFDLENBQUM7O2tCQUVXLFFBQVE7Ozs7O0FDN0N4QixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFFLFlBQVksQ0FBRSxDQUFDOztBQUV6QyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFXOztBQUVuQyxNQUFJLEVBQUUsR0FBRyxJQUFJLFNBQVMsQ0FBQywwQkFBMEIsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNuRSxNQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDdEIsTUFBSSxNQUFNLEdBQUc7QUFDWCxPQUFHLEVBQUUsRUFBRTtHQUNSLENBQUM7O0FBRUYsV0FBUyxXQUFXLENBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRztBQUNuQyxRQUFLLElBQUksS0FBSyxLQUFLLEVBQUc7QUFDcEIsWUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUUsUUFBUSxDQUFFLENBQUM7S0FDN0I7R0FDSjs7QUFFRCxJQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFVBQVMsQ0FBQyxFQUFFO0FBQ3pDLFFBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBRSxDQUFDO0FBQ2hDLFFBQUssSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLEVBQUc7QUFDdEIsV0FBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFHO0FBQzVDLGNBQU0sQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFFLENBQUUsSUFBSSxDQUFFLENBQUM7T0FDekI7S0FDSjs7QUFFRCxRQUFLLElBQUksQ0FBQyxJQUFJLElBQUksU0FBUyxFQUFHO0FBQzVCLFdBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRztBQUMzQyxvQkFBWSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBRSxDQUFFLENBQUM7T0FDckM7S0FDRjtHQUNILENBQUMsQ0FBQzs7QUFFRixXQUFTLFdBQVcsQ0FBRSxJQUFJLEVBQUc7QUFDM0IsTUFBRSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQztHQUNqQjs7QUFFRCxTQUFPO0FBQ0wsZ0JBQVksRUFBRSxZQUFZO0FBQzFCLGVBQVcsRUFBRSxXQUFXO0FBQ3hCLGVBQVcsRUFBRSxXQUFXO0dBQ3pCLENBQUM7Q0FFSCxDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IHRvZG9MaXN0IGZyb20gXCIuL2RpcmVjdGl2ZXMvdG9kb0xpc3QuanNcIjtcblxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCBcIm1pcnJvci1hcHBcIiwgWyBcInRvZG8tbGlzdFwiIF0gKTtcbiIsIlxuXG5cdHZhciB0b2RvTGlzdCA9IGFuZ3VsYXIubW9kdWxlKCBcInRvZG8tbGlzdFwiLCBbXSApO1xuXG5cdHRvZG9MaXN0LmRpcmVjdGl2ZSggXCJ0b2RvTGlzdFwiLCBbICdXZWJTb2NrZXQnLCBmdW5jdGlvbiggIHdlYlNvY2tldCApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cmV0cmljdDogXCJFXCIsXG5cdFx0XHR0ZW1wbGF0ZVVybDogXCIuL3ZpZXdzL3RvZG8tbGlzdC5odG1sXCIsXG5cdFx0XHRjb250cm9sbGVyOiBmdW5jdGlvbiggJHNjb3BlICkge1xuXG5cdFx0XHRcdHdlYlNvY2tldC5hZGRDYWxsYmFjayggXCJhZGRcIiwgZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0XHRcdFx0JHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdCRzY29wZS50b2RvLml0ZW1zLnB1c2goIGRhdGEuZGF0YSApO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLml0ZW1zID0gd2ViU29ja2V0LmluaXRpYWxJdGVtcztcblx0XHRcdFx0dGhpcy5uZXdJdGVtID0gXCJcIjtcblx0XHRcdFx0dGhpcy5hZGRJdGVtID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInRvZG9faXRlbVwiLFxuXHRcdFx0XHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdFx0XHRcdHRleHQ6IHRoaXMubmV3SXRlbSxcblx0XHRcdFx0XHRcdFx0XHRcdGRvbmU6IGZhbHNlXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0d2ViU29ja2V0LnNlbmRNZXNzYWdlKCBKU09OLnN0cmluZ2lmeSggb2JqICkgKVxuXHRcdFx0XHRcdHRoaXMubmV3SXRlbSA9IFwiXCI7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMudG9nZ2xlRG9uZSA9IGZ1bmN0aW9uKCBpdGVtICkge1xuXHRcdFx0XHRcdGl0ZW0uZG9uZSA9ICFpdGVtLmRvbmU7XG5cblx0XHRcdFx0XHR2YXIgb2JqID0ge1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwidG9kb19pdGVtXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YTogaXRlbVxuXHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0d2ViU29ja2V0LnNlbmRNZXNzYWdlKCBKU09OLnN0cmluZ2lmeSggb2JqICkgKVxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblx0XHRcdGNvbnRyb2xsZXJBczogXCJ0b2RvXCJcblx0XHR9O1xuXHR9XSk7XG5cblx0ZXhwb3J0IGRlZmF1bHQgdG9kb0xpc3Q7XG4iLCJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoIFwibWlycm9yLWFwcFwiICk7XG5cbmFwcC5mYWN0b3J5KFwiV2ViU29ja2V0XCIsIGZ1bmN0aW9uKCkge1xuXG5cdHZhciB3cyA9IG5ldyBXZWJTb2NrZXQoXCJ3czovLzE3OC42Mi4xMTcuMTUwOjk5OTlcIiwgXCJlY2hvLXByb3RvY29sXCIpO1xuICB2YXIgaW5pdGlhbEl0ZW1zID0gW107XG4gIHZhciBldmVudHMgPSB7XG4gICAgYWRkOiBbXVxuICB9O1xuXG4gIGZ1bmN0aW9uIGFkZENhbGxiYWNrKCB0eXBlLCBjYWxsYmFjayApIHtcbiAgICAgIGlmICggdHlwZSA9PT0gXCJhZGRcIiApIHtcbiAgICAgICAgZXZlbnRzLmFkZC5wdXNoKCBjYWxsYmFjayApO1xuICAgICAgfVxuICB9XG5cbiAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZSggZS5kYXRhICk7XG4gICAgaWYgKCBkYXRhLnR5cGUgPT0gXCJhZGRcIiApIHtcbiAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgZXZlbnRzLmFkZC5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICBldmVudHMuYWRkWyBpIF0oIGRhdGEgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggZGF0YS50eXBlID09IFwiY29ubmVjdFwiICkge1xuICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgZGF0YS5kYXRhLmxlbmd0aDsgaSsrICkge1xuICAgICAgICBpbml0aWFsSXRlbXMucHVzaCggZGF0YS5kYXRhWyBpIF0gKTtcbiAgICAgIH1cbiAgICB9XG5cdH0pO1xuXG4gIGZ1bmN0aW9uIHNlbmRNZXNzYWdlKCBkYXRhICkge1xuICAgIHdzLnNlbmQoIGRhdGEgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaW5pdGlhbEl0ZW1zOiBpbml0aWFsSXRlbXMsXG4gICAgc2VuZE1lc3NhZ2U6IHNlbmRNZXNzYWdlLFxuICAgIGFkZENhbGxiYWNrOiBhZGRDYWxsYmFja1xuICB9O1xuXG59KTtcbiJdfQ==
